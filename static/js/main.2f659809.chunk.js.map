{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","query","setQuery","weather","setWeather","search","fetch","then","resp","json","result","console","log","useEffect","time","Date","toLocaleTimeString","hour","minute","className","list","main","temp","description","Row","Col","style","textAlign","icon","faWifi","cololr","faBatteryThreeQuarters","marginLeft","display","justifyContent","lg","type","placeholder","onChange","e","target","value","position","onClick","right","top","background","border","color","faSearch","margin","flexDirection","fontSize","city","name","country","letterSpacing","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","paddingBottom","marginTop","backgroundColor","dt_txt","toLocaleDateString","weekday","faCloud","faSun","faSnowflake","faCloudRain","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f659809.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSearch,\n  faBatteryThreeQuarters,\n  faWifi,\n  faCloudRain,\n  faSun,\n  faCloud,\n  faSnowflake,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const key = `4db3037f078521b122cfe50c8b39df46`;\n  const url = \"https://api.openweathermap.org/data/2.5/\";\n\n  const search = () => {\n    fetch(`${url}forecast?q=${query}&appid=${key}&units=metric`)\n      .then((resp) => resp.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(weather);\n      });\n    // }\n  };\n\n  useEffect(() => {\n    search();\n  }, []);\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Satuarday\",\n    ];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n  const time = new Date().toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n  return (\n    <div\n      className={\n        typeof weather.list != \"undefined\"\n          ? weather.list[0].main.temp > 12 &&\n            weather.list[0].weather[0].description === \"clear sky\" &&\n            \"6:00:00 PM\" > time &&\n            time > \"6:00:00 AM\"\n            ? \"back-sun-1\"\n            : weather.list[0].main.temp > 12 &&\n              weather.list[0].weather[0].description === \"clear sky\" &&\n              \"6:00:00 AM\" > time &&\n              time > \"01:00:00 AM\"\n            ? \"night\"\n            : weather.list[0].main.temp > 12 &&\n              weather.list[0].weather[0].description === \"broken clouds\" &&\n              \"6:00 PM\" > time > \"9:00 AM\"\n            ? \"clouds\"\n            : weather.list[0].main.temp > 12 &&\n              weather.list[0].weather[0].description === \"overcast clouds\" &&\n              \"6:00 PM\" > time > \"9:00 AM\"\n            ? \"clouds\"\n            : weather.list[0].main.temp > 0 &&\n              weather.list[0].weather[0].description === \"light rain\"\n            ? \"back-raining\"\n            : weather.list[0].main.temp < 16 &&\n              weather.list[0].weather[0].description === \"scattered clouds\" &&\n              \"6:00 PM\" > time > \"9:00 AM\"\n            ? \"scattered-clouds\"\n            : weather.list[0].main.temp < 4 && \"6:00 PM\" > time > \"9:00 AM\"\n            ? \"winter\"\n            : \"back-sun\"\n          : \"back-sun\"\n      }\n    >\n      <div className=\"container\">\n        <Row className=\"pt-2 text-white\">\n          <Col>{time}</Col>\n          <Col style={{ textAlign: \"right\" }}>\n            <FontAwesomeIcon icon={faWifi} style={{ cololr: \"#fff\" }} />\n            <FontAwesomeIcon\n              icon={faBatteryThreeQuarters}\n              style={{ cololr: \"#fff\", marginLeft: \"5px\" }}\n            />\n          </Col>\n        </Row>\n        <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Col lg={12} style={{ textAlign: \"center\" }}>\n            <input\n              type=\"text\"\n              className=\"search-bar mr-3\"\n              placeholder=\"Search...\"\n              onChange={(e) => setQuery(e.target.value)}\n              value={query}\n              style={{ position: \"relative\" }}\n            />\n            <button\n              className=\"btn\"\n              onClick={search}\n              style={{\n                position: \"absolute\",\n                right: \"30px\",\n                top: \"17px\",\n                background: \"none\",\n                border: \"none\",\n              }}\n            >\n              <FontAwesomeIcon style={{ color: \"#919296\" }} icon={faSearch} />\n            </button>\n          </Col>\n        </Row>\n        <Row\n          style={{\n            textAlign: \"center\",\n            margin: \"15px auto\",\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          {typeof weather.list != \"undefined\" ? (\n            <>\n              <Col\n                lg={12}\n                style={{\n                  textAlign: \"center\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div>\n                  <div className=\"weather-box\">\n                    <div\n                      className=\"location\"\n                      style={{ color: \"#fff\", fontSize: \"30px\" }}\n                    >\n                      {weather.city.name}, {weather.city.country}\n                    </div>\n                    <div\n                      className=\"weather\"\n                      style={{\n                        color: \"#fff\",\n                        fontSize: \"20px\",\n                        letterSpacing: \"5px\",\n                      }}\n                    >\n                      {weather.list[0].weather[0].description}\n                    </div>\n                    <div className=\"date text-white\">\n                      {dateBuilder(new Date())}\n                    </div>\n                    <div\n                      className=\"temp pt-4\"\n                      style={{\n                        position: \"relative\",\n                        color: \"#fff\",\n                        fontSize: \"70px\",\n                      }}\n                    >\n                      {/* {parseInt(Math.round((weather.main.temp - 32) * (5/9))  /100 * 10)}  */}\n                      {Math.round(weather.list[0].main.temp)}\n                    </div>\n                  </div>\n                </div>\n              </Col>\n\n              <Col\n                lg={12}\n                style={{\n                  textAlign: \"center\",\n                  paddingBottom: \"25px\",\n                  marginTop: \"20px\",\n                  backgroundColor: \"rgba(238,238,238,0.3)\",\n                }}\n              >\n                {/* next day       1      */}\n                <Row\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    marginTop: \"20px\",\n                    color: \"#fff\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  <Col style={{ textAlign: \"left\" }}>\n                    {new Date(weather.list[3].dt_txt).toLocaleDateString(\n                      [\"en-GB\"],\n                      { weekday: \"long\" }\n                    )}\n                  </Col>\n\n                  <Col>\n                    {weather.list[3].weather[0].description ===\n                    \"broken clouds\" ? (\n                      <FontAwesomeIcon\n                        icon={faCloud}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : weather.list[3].weather[0].description ===\n                      \"clear sky\" ? (\n                      <FontAwesomeIcon\n                        icon={faSun}\n                        style={{ color: \"yellow\" }}\n                      />\n                    ) : weather.list[3].weather[0].description ===\n                      \"light snow\" ? (\n                      <FontAwesomeIcon\n                        icon={faSnowflake}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon={faCloudRain}\n                        style={{ color: \"#fff\" }}\n                      />\n                    )}\n                  </Col>\n                  <Col style={{ textAlign: \"right\" }}>\n                    {Math.round(weather.list[3].main.temp)}&#176;\n                  </Col>\n                </Row>\n\n                {/* next day     2        */}\n\n                <Row\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    paddingTop: \"20px\",\n                    color: \"#fff\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  <Col style={{ textAlign: \"left\" }}>\n                    {new Date(weather.list[10].dt_txt).toLocaleDateString(\n                      [\"en-GB\"],\n                      { weekday: \"long\" }\n                    )}\n                  </Col>\n                  <Col>\n                    {weather.list[10].weather[0].description ===\n                    \"broken clouds\" ? (\n                      <FontAwesomeIcon\n                        icon={faCloud}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : weather.list[10].weather[0].description ===\n                      \"clear sky\" ? (\n                      <FontAwesomeIcon\n                        icon={faSun}\n                        style={{ color: \"yellow\" }}\n                      />\n                    ) : weather.list[10].weather[0].description ===\n                      \"light snow\" ? (\n                      <FontAwesomeIcon\n                        icon={faSnowflake}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon={faCloudRain}\n                        style={{ color: \"#fff\" }}\n                      />\n                    )}\n                  </Col>\n                  <Col style={{ textAlign: \"right\" }}>\n                    {Math.round(weather.list[10].main.temp)}&#176;\n                  </Col>\n                </Row>\n                {/* next day     3        */}\n                <Row\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    paddingTop: \"20px\",\n                    color: \"#fff\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  <Col style={{ textAlign: \"left\" }}>\n                    {new Date(weather.list[18].dt_txt).toLocaleDateString(\n                      [\"en-GB\"],\n                      { weekday: \"long\" }\n                    )}\n                  </Col>\n                  <Col>\n                    {weather.list[18].weather[0].description ===\n                    \"broken clouds\" ? (\n                      <FontAwesomeIcon\n                        icon={faCloud}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : weather.list[18].weather[0].description ===\n                      \"clear sky\" ? (\n                      <FontAwesomeIcon\n                        icon={faSun}\n                        style={{ color: \"yellow\" }}\n                      />\n                    ) : weather.list[18].weather[0].description ===\n                      \"light snow\" ? (\n                      <FontAwesomeIcon\n                        icon={faSnowflake}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon={faCloudRain}\n                        style={{ color: \"#fff\" }}\n                      />\n                    )}\n                  </Col>\n                  <Col style={{ textAlign: \"right\" }}>\n                    {Math.round(weather.list[18].main.temp)}&#176;\n                  </Col>\n                </Row>\n                {/* next day     4        */}\n                <Row\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    paddingTop: \"20px\",\n                    color: \"#fff\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  <Col style={{ textAlign: \"left\" }}>\n                    {new Date(weather.list[26].dt_txt).toLocaleDateString(\n                      [\"en-GB\"],\n                      { weekday: \"long\" }\n                    )}\n                  </Col>\n                  <Col className=\"col-2\">\n                    {weather.list[26].weather[0].description ===\n                    \"broken clouds\" ? (\n                      <FontAwesomeIcon\n                        icon={faCloud}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : weather.list[26].weather[0].description ===\n                      \"clear sky\" ? (\n                      <FontAwesomeIcon\n                        icon={faSun}\n                        style={{ color: \"yellow\" }}\n                      />\n                    ) : weather.list[26].weather[0].description ===\n                      \"light snow\" ? (\n                      <FontAwesomeIcon\n                        icon={faSnowflake}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon={faCloudRain}\n                        style={{ color: \"#fff\" }}\n                      />\n                    )}\n                  </Col>\n                  <Col style={{ textAlign: \"right\" }}>\n                    {Math.round(weather.list[26].main.temp)}&#176;\n                  </Col>\n                </Row>\n                {/* next day      5       */}\n                <Row\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    paddingTop: \"20px\",\n                    color: \"#fff\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  <Col style={{ textAlign: \"left\" }}>\n                    {new Date(weather.list[34].dt_txt).toLocaleDateString(\n                      [\"en-GB\"],\n                      { weekday: \"long\" }\n                    )}\n                  </Col>\n                  <Col>\n                    {weather.list[34].weather[0].description ===\n                    \"broken clouds\" ? (\n                      <FontAwesomeIcon\n                        icon={faCloud}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : weather.list[34].weather[0].description ===\n                      \"clear sky\" ? (\n                      <FontAwesomeIcon\n                        icon={faSun}\n                        style={{ color: \"yellow\" }}\n                      />\n                    ) : weather.list[34].weather[0].description ===\n                      \"light snow\" ? (\n                      <FontAwesomeIcon\n                        icon={faSnowflake}\n                        style={{ color: \"#fff\" }}\n                      />\n                    ) : (\n                      <FontAwesomeIcon\n                        icon={faCloudRain}\n                        style={{ color: \"#fff\" }}\n                      />\n                    )}\n                  </Col>\n                  <Col style={{ textAlign: \"right\" }}>\n                    {Math.round(weather.list[34].main.temp)}&#176;\n                  </Col>\n                </Row>\n              </Col>\n            </>\n          ) : (\n            <h2 style={{ color: \"#fff\", marginTop: \"100px\" }}>Enter city</h2>\n          )}\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}