{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","query","setQuery","weather","setWeather","search","e","fetch","then","resp","json","result","console","log","useEffect","time","Date","toLocaleTimeString","hour","minute","className","list","main","temp","description","Row","Col","style","textAlign","icon","faWifi","cololr","faBatteryThreeQuarters","marginLeft","display","justifyContent","lg","type","placeholder","onChange","target","value","position","onClick","right","top","background","border","color","faSearch","margin","flexDirection","fontSize","city","name","country","letterSpacing","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","paddingBottom","marginTop","backgroundColor","dt_txt","toLocaleDateString","weekday","faCloud","faSun","faSnowflake","faCloudRain","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.356851fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Col, Row } from 'react-bootstrap'\nimport ReactDOM from 'react-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch, faBatteryThreeQuarters, faWifi, faCloudRain, faSun, faCloud, faSnowflake } from '@fortawesome/free-solid-svg-icons'\n\n\nconst App  = () => {\n\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n  const  key = `4db3037f078521b122cfe50c8b39df46`\n  // const key = `5616dafb564eab96a4d0e188f4ea52ce`\n  // const  url = `api.openweathermap.org/data/2.5/weather?q=${query}&appid=${key}`\nconst url = \"https://api.openweathermap.org/data/2.5/\"\n\n    const search = (e) => {\n    // if (evt.key === 'Enter') {\n      // e.preventDefault()\n      //  fetch(`${url}weather?q=${query}&appid=${key}&units=metric`)\n      // api.openweathermap.org/data/2.5/forecast?q={city name}&appid={your api key}\n      fetch(`${url}forecast?q=${query}&appid=${key}&units=metric`)\n       .then(resp => resp.json())\n       .then(result => {\n         setWeather(result);\n         setQuery('');\n         console.log(weather)\n       })\n      // }\n\n    }\n  \n   useEffect (() => {\n    search()\n   },[])\n\n\n\n\n      const dateBuilder = (d) =>  {\n          let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",  \"November\", \"December\"];\n          let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Satuarday\"];\n            let  day = days[d.getDay()];\n            let  date = d.getDate();\n      \n            let month = months[d.getMonth()];\n            let  year =  d.getFullYear();\n\n\n            return `${day} ${date} ${month} ${year}`\n\n     }\n     const time =  new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n     return (\n      <div className={ \n         typeof weather.list  != \"undefined\" \n      ? (weather.list[0].main.temp > 12) && ( weather.list[0].weather[0].description === 'clear sky') && ('6:00:00 PM' > time && time > '6:00:00 AM')\n           ? 'back-sun-1' : \n           (weather.list[0].main.temp > 12) && ( weather.list[0].weather[0].description === 'clear sky') && ('6:00:00 AM' > time && time > '01:00:00 AM')\n           ? 'night' : \n           (weather.list[0].main.temp > 12) && ( weather.list[0].weather[0].description === 'broken clouds')  && ('6:00 PM' > time > '9:00 AM')\n            ? 'clouds' : \n            (weather.list[0].main.temp > 12) && ( weather.list[0].weather[0].description === 'overcast clouds')  && ('6:00 PM' > time > '9:00 AM')\n            ? 'clouds' : \n           (weather.list[0].main.temp > 0) && ( weather.list[0].weather[0].description === 'light rain') \n           ? 'back-raining' : \n           (weather.list[0].main.temp < 16) && ( weather.list[0].weather[0].description === 'scattered clouds')  && ('6:00 PM' > time > '9:00 AM')\n           ? 'scattered-clouds' : \n           (weather.list[0].main.temp < 4) &&  ('6:00 PM' > time > '9:00 AM') ?\n           'winter' : \n           'back-sun' : 'back-sun' \n           \n      }>\n     \n        <div className='container'>\n          <Row className='pt-2 text-white'>\n            <Col >\n           {time}\n            </Col>\n            <Col style={{textAlign: 'right'}}>\n              <FontAwesomeIcon  icon={faWifi} style={{cololr: '#fff'}} />\n              <FontAwesomeIcon icon={faBatteryThreeQuarters} style={{cololr: '#fff', marginLeft: '5px'}} />\n            </Col>\n          </Row>\n          <Row style={{display: 'flex', justifyContent: 'center'}}>\n            <Col lg={12} style={{textAlign: 'center'}}>\n             \n              <input type='text'\n                className='search-bar mr-3'\n                placeholder='Search...'\n                onChange={(e) => setQuery(e.target.value)}\n                value={query}\n                style={{position: 'relative'}}\n                \n       \n                \n              />\n              <button className='btn' onClick={search} style={{position: 'absolute', right:'30px', top: '17px', background: 'none', border: 'none'}}><FontAwesomeIcon style={{color: '#fff'}} icon={faSearch}/></button>\n\n        {/* <h5>Weather for Anytime</h5> */}\n            </Col>\n          </Row>\n          <Row style={{textAlign: 'center', margin: '15px auto', display: 'flex', flexDirection: 'column'}}>\n            {( typeof weather.list  != \"undefined\") ?\n            (\n              <>\n            <Col lg={12} style={{textAlign: 'center', display:'flex', justifyContent:'center'}}>\n            \n                <div>\n                  <div className='weather-box'>\n                  \n                  <div className='location' style={{color: '#fff', fontSize: '30px'}}>\n                    {weather.city.name},  {weather.city.country}\n                  </div>\n                  <div className='weather' style={{color: '#fff', fontSize: '20px', letterSpacing: '5px'}}>\n                      {weather.list[0].weather[0].description}\n                    </div>\n                  <div className='date text-white' >{dateBuilder(new Date())}</div>\n                    <div className='temp pt-4' style={{position: 'relative', color: '#fff', fontSize: '70px'}}>\n                      {/* {parseInt(Math.round((weather.main.temp - 32) * (5/9))  /100 * 10)}  */}\n                      {Math.round(weather.list[0].main.temp)} \n                    </div>\n                    \n                  </div>\n                  </div>\n          \n            \n             \n\n            </Col>\n\n         \n             <Col lg={12} style={{ textAlign: 'center',  paddingBottom: '25px',  marginTop: '20px', backgroundColor:'rgba(238,238,238,0.3)'}}>\n   {/* next day       1      */}\n                <Row style={{display: 'flex', justifyContent: 'space-between', marginTop: '20px', color: '#fff', fontSize: '20px'}}>\n                  <Col style={{textAlign: 'left'}}>\n                    {new Date(weather.list[3].dt_txt).toLocaleDateString([\"en-GB\"], { weekday: 'long' })}\n                  </Col>\n              \n                  <Col>\n          \n                  {  weather.list[3].weather[0].description === \"broken clouds\"  ?  \n                       <FontAwesomeIcon icon={faCloud} style={{color: '#fff'}} />: \n                       weather.list[3].weather[0].description === \"clear sky\" ?\n                   \n                      <FontAwesomeIcon icon={faSun} style={{color: 'yellow'}} /> : \n\n                      weather.list[3].weather[0].description === \"light snow\" ? \n                      <FontAwesomeIcon icon={faSnowflake} style={{color: '#fff'}} /> :\n\n                      <FontAwesomeIcon icon={faCloudRain} style={{color: '#fff'}} /> \n\n\n                  }\n                    \n                  </Col>\n                  <Col style={{textAlign: 'right'}}>\n                  {Math.round(weather.list[3].main.temp)}&#176; \n                  </Col>\n                </Row>\n\n   {/* next day     2        */}\n\n                <Row style={{display: 'flex', justifyContent: 'space-between', paddingTop: '20px', color: '#fff', fontSize: '20px'}}>\n                  <Col style={{textAlign: 'left'}}>\n                    {new Date(weather.list[10].dt_txt).toLocaleDateString([\"en-GB\"], { weekday: 'long' })}\n                  </Col>\n                  <Col>\n                  {  weather.list[10].weather[0].description === \"broken clouds\"  ?  \n                       <FontAwesomeIcon icon={faCloud} style={{color: '#fff'}} />: \n                       weather.list[10].weather[0].description === \"clear sky\" ?\n                   \n                       \n                      <FontAwesomeIcon icon={faSun} style={{color: 'yellow'}} /> :\n                      weather.list[10].weather[0].description === \"light snow\" ? \n                      <FontAwesomeIcon icon={faSnowflake} style={{color: '#fff'}} /> :\n\n                      <FontAwesomeIcon icon={faCloudRain} style={{color: '#fff'}} />\n\n                  }\n                  </Col>\n                  <Col style={{textAlign: 'right'}}>\n                  {Math.round(weather.list[10].main.temp)}&#176;\n                  </Col>\n                </Row>\n    {/* next day     3        */}            \n                <Row style={{display: 'flex', justifyContent: 'space-between', paddingTop: '20px', color: '#fff', fontSize: '20px'}}>\n                  <Col style={{textAlign: 'left'}}>\n                    {new Date(weather.list[18].dt_txt).toLocaleDateString([\"en-GB\"], { weekday: 'long' })}\n                  </Col>\n                  <Col>\n                  {  weather.list[18].weather[0].description === \"broken clouds\"  ?  \n                       <FontAwesomeIcon icon={faCloud} style={{color: '#fff'}} />: \n                       weather.list[18].weather[0].description === \"clear sky\" ?\n                   \n                      <FontAwesomeIcon icon={faSun} style={{color: 'yellow'}} /> :\n\n                      weather.list[18].weather[0].description === \"light snow\" ? \n                      <FontAwesomeIcon icon={faSnowflake} style={{color: '#fff'}} /> :\n\n                      <FontAwesomeIcon icon={faCloudRain} style={{color: '#fff'}} />\n\n                  }\n                  </Col>\n                  <Col style={{textAlign: 'right'}}>\n                  {Math.round(weather.list[18].main.temp)}&#176; \n                  </Col>\n                </Row>\n       {/* next day     4        */}            \n                <Row style={{display: 'flex', justifyContent: 'space-between', paddingTop: '20px', color: '#fff', fontSize: '20px'}}>\n                  <Col style={{textAlign: 'left'}}> \n                    {new Date(weather.list[26].dt_txt).toLocaleDateString([\"en-GB\"], { weekday: 'long' })}\n                  </Col>\n                  <Col  className='col-2'>\n                   \n                    {  weather.list[26].weather[0].description === \"broken clouds\"  ?  \n                       <FontAwesomeIcon icon={faCloud} style={{color: '#fff'}} />: \n                       weather.list[26].weather[0].description === \"clear sky\" ?\n                   \n                      <FontAwesomeIcon icon={faSun} style={{color: 'yellow'}} /> :\n\n                      weather.list[26].weather[0].description === \"light snow\" ? \n                      <FontAwesomeIcon icon={faSnowflake} style={{color: '#fff'}} /> :\n\n                      <FontAwesomeIcon icon={faCloudRain} style={{color: '#fff'}} />\n\n                  }\n                  </Col>\n                  <Col style={{textAlign: 'right'}}>\n                  {Math.round(weather.list[26].main.temp)}&#176; \n                  </Col>\n                </Row>\n        {/* next day      5       */}           \n                <Row style={{display: 'flex', justifyContent: 'space-between', paddingTop: '20px', color: '#fff', fontSize: '20px'}}>\n                  <Col style={{textAlign: 'left'}}>\n                    {new Date(weather.list[34].dt_txt).toLocaleDateString([\"en-GB\"], { weekday: 'long' })}\n                  </Col>\n                  <Col>\n                  {  weather.list[34].weather[0].description === \"broken clouds\"  ?  \n                       <FontAwesomeIcon icon={faCloud} style={{color: '#fff'}} />: \n                       weather.list[34].weather[0].description === \"clear sky\" ?\n                   \n                      <FontAwesomeIcon icon={faSun} style={{color: 'yellow'}} /> :\n\n                      weather.list[34].weather[0].description === \"light snow\" ? \n                      <FontAwesomeIcon icon={faSnowflake} style={{color: '#fff'}} /> :\n\n                      <FontAwesomeIcon icon={faCloudRain} style={{color: '#fff'}} />\n\n                  }\n                  </Col>\n                  <Col style={{textAlign: 'right'}}>\n                  {Math.round(weather.list[34].main.temp)}&#176; \n                  </Col>\n                </Row>\n            </Col>\n            </>\n                ) : (<h2 style={{color : '#fff', marginTop: '100px'}}>Enter city</h2>)\n              }\n          </Row>\n        </div>\n      </div>\n    )\n     \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}